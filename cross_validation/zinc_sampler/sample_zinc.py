"""
For the subset of drugs of each pocket, sample the same number of molecules
from the Zinc dataset, such that the molecules from the Zinc dataset have
the same molecular weight distribution.
"""
import argparse
from zinc_sampler import ZincSampler
from os import listdir
from os.path import isfile, join
import yaml
import os
from tqdm import tqdm 


def get_args():
    parser = argparse.ArgumentParser("python")

    parser.add_argument("-zinc_dataset",
                        required=False,
                        default="../../../../zinc-sampler-project/zinc-dataset-bins.pickle",
                        help="the SMILES from Zinc in bins")

    parser.add_argument("-in_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_sample_clustered/",
                        help="input molecules for molecular weight distribution")

    parser.add_argument("-out_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/zinc_sampled/",
                        help="directory for sampled SMILES from Zinc")

    return parser.parse_args()


if __name__=="__main__":
    args = get_args()
    zinc_dataset = args.zinc_dataset
    in_dir = args.in_dir
    out_dir = args.out_dir
    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    # load the Zinc molecules in bins to the sampler
    sampler = ZincSampler(zinc_dataset)

    # the yaml file list of the molecules generated by the GNN model for each pocket
    molFiles = [f for f in listdir(in_dir) if isfile(join(in_dir, f))]

    # read each file and sample according to the molecular weight distribution
    for molFile in tqdm(molFiles):
        with open(join(in_dir, molFile), 'r') as f:
            inMols = yaml.full_load(f)
        
        # sample
        outMols = sampler.sample_mols(inMols)

        outFile = molFile.split('_')[0] + '_zinc.yaml'
        with open(join(out_dir, outFile), 'w') as f:
            yaml.dump(outMols, f)
