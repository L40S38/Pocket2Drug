"""
Plot the best docking scores of the molecules generated by the model
and the random molecules sampled from Zinc.
"""
import argparse
from os import listdir
from os.path import isfile, join
from tqdm import tqdm
import yaml
import matplotlib.pyplot as plt


def get_args():
    parser = argparse.ArgumentParser("python")

    parser.add_argument("-model_mols_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_docking_results/",
                        help="directory of docking scores of molecules generated by model")

    parser.add_argument("-zinc_mols_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/zinc_sampled_docking_results/",
                        help="directory of docking scores of molecules sampled from Zinc")

    return parser.parse_args()

if __name__=="__main__":
    args = get_args()
    model_mols_dir = args.model_mols_dir
    zinc_mols_dir = args.zinc_mols_dir

    model_docking_score_files = [f for f in listdir(
                model_mols_dir) if isfile(join(model_mols_dir, f))]

    # tuples of docking scores
    best_docking_scores = []
    print("loading docking scores...")
    #for docking_file in tqdm(model_docking_score_files):
        # docking scores of model molecules 
        #with open(join(model_mols_dir, docking_file), "r") as f:
        #    model_docking_scores = yaml.full_load(f)
        
        # docking scores of random zinc molecules
        #with open(join(zinc_mols_dir, docking_file), "r") as f:
        #    zinc_docking_scores = yaml.full_load(f)
        
        #best_docking_scores.append(
        #    (min(zinc_docking_scores), min(model_docking_scores))
        #)

    # sort the scores according to the zinc docking scores
    best_docking_scores.sort(key=lambda x: x[0])

    # Plot a line y = x. If the plot is above this line, it means that
    # model is better than random, and worse than random if plot is below
    # this line. 
    fig, ax = plt.subplots()
    ax.set_xlabel('Zinc docking scores')
    ax.set_ylabel('Model docking scores')
    
    #x = [best_docking_scores[0][0], best_docking_scores[-1][-1]]
    x = [0, 1]
    line21 = ax.plot(x, x, dashes=[6, 2], color='grey')

    # Plot the docking scores

    plt.show()



        