"""
Plot the distribution of docking scores of the molecules generated by the model
and the random molecules sampled from Zinc.
"""
import argparse
from os import listdir
from os.path import isfile, join
from tqdm import tqdm
import yaml
import matplotlib.pyplot as plt


def get_args():
    parser = argparse.ArgumentParser("python")

    parser.add_argument("-model_mols_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_docking_results_ligand_efficiency/",
                        help="directory of docking scores of molecules generated by model")

    parser.add_argument("-zinc_mols_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/zinc_docking_results_ligand_efficiency/",
                        help="directory of docking scores of molecules sampled from Zinc")

    return parser.parse_args()

if __name__=="__main__":
    args = get_args()
    model_mols_dir = args.model_mols_dir
    zinc_mols_dir = args.zinc_mols_dir

    model_docking_score_files = [f for f in listdir(
                model_mols_dir) if isfile(join(model_mols_dir, f))]

    all_model_docking_scores = []
    all_zinc_docking_scores = []

    print("loading docking scores...")
    for docking_file in tqdm(model_docking_score_files):
        # docking scores of model molecules 
        with open(join(model_mols_dir, docking_file), "r") as f:
            model_docking_scores = yaml.full_load(f)
            all_model_docking_scores.extend(list(model_docking_scores.values()))

        # docking scores of random zinc molecules
        with open(join(zinc_mols_dir, docking_file), "r") as f:
            zinc_docking_scores = yaml.full_load(f)
            all_zinc_docking_scores.extend(list(zinc_docking_scores.values()))

    # remove the outliers that are larger than 0
    all_model_docking_scores = [x for x in all_model_docking_scores if x < 0] 
    all_zinc_docking_scores = [x for x in all_zinc_docking_scores if x < 0] 

    fig, ax = plt.subplots()
    ax.set_title('Ligand Efficiency Distribution')
    ax.set_xlabel('Ligand Efficiency')
    ax.set_ylabel('Count')
    ax.hist(all_model_docking_scores, histtype='step', bins=100, color='red', label="Model")
    ax.hist(all_zinc_docking_scores, histtype='bar', bins=100, alpha=0.5, color="grey", label="Zinc")
    ax.legend()
    plt.savefig(join('./figures/', "total_ligand_efficiency_distribution" + ".png"), dpi=300)



        