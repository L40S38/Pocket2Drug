"""
Plot the best docking scores of the molecules generated by the model
and the random molecules sampled from Zinc.
"""
import argparse
from os import listdir
from os.path import isfile, join
from tqdm import tqdm
import yaml
import matplotlib.pyplot as plt
from statistics import median

def get_args():
    parser = argparse.ArgumentParser("python")

    parser.add_argument("-model_mols_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_docking_results/",
                        help="directory of docking scores of molecules generated by model")

    parser.add_argument("-zinc_mols_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/zinc_sampled_docking_results/",
                        help="directory of docking scores of molecules sampled from Zinc")

    return parser.parse_args()

if __name__=="__main__":
    args = get_args()
    model_mols_dir = args.model_mols_dir
    zinc_mols_dir = args.zinc_mols_dir

    model_docking_score_files = [f for f in listdir(
                model_mols_dir) if isfile(join(model_mols_dir, f))]

    # tuples of docking scores
    best_docking_scores = []
    num_problematic_pocket = 0
    print("loading docking scores...")
    for docking_file in tqdm(model_docking_score_files):
        # docking scores of model molecules 
        with open(join(model_mols_dir, docking_file), "r") as f:
            model_docking_scores = yaml.full_load(f)
        
        # docking scores of random zinc molecules
        with open(join(zinc_mols_dir, docking_file), "r") as f:
            zinc_docking_scores = yaml.full_load(f)
        
        if zinc_docking_scores and model_docking_scores:
            best_docking_scores.append(
                (median(zinc_docking_scores.values()), median(model_docking_scores.values()))
            )
        else:
            num_problematic_pocket += 1 

    print("loading finished, number of problematic pocket: ", num_problematic_pocket)

    # sort the scores according to the zinc docking scores
    best_docking_scores.sort(key=lambda x: x[0])
    fig, ax = plt.subplots()
    ax.set_title('Docking Scores')
    ax.set_xlabel('Zinc docking scores')
    ax.set_ylabel('Model docking scores')

    # Plot a line y = x. If the plot is above this line, it means that
    # model is better than random, and worse than random if plot is below
    # this line. 
    x = [best_docking_scores[0][0], best_docking_scores[-1][0]]
    line1 = ax.plot(x, x, dashes=[6, 2], color='grey')

    # plot the model docking score vs the random docking score
    zinc_docking_scores = [x[0] for x in best_docking_scores]
    model_docking_scores = [x[1] for x in best_docking_scores]
    line2 = ax.scatter(zinc_docking_scores, model_docking_scores, marker='.')

    # Plot the docking scores
    plt.savefig("median_docking_scores.png", dpi=300)

    # simple statistics
    zinc_better = 0 
    model_better = 0
    tie = 0
    for x in best_docking_scores:
        if x[0] < x[1]:
            zinc_better += 1
        elif x[0] > x[1]:
            model_better += 1 
        else:
            tie += 1

    print("number of pockets where zinc is better: ", zinc_better)
    print("number of pockets where model is better: ", model_better)
    print("number of ties: ", tie)


        