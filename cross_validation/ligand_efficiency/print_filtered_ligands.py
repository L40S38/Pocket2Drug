"""
Print the good ligands with good ligand efficiency.
"""

"""
Plot the distribution of docking scores of the molecules generated by the model
and the random molecules sampled from Zinc.
"""
import argparse
from os import listdir
from os.path import isfile, join
from tqdm import tqdm
import yaml


def get_args():
    parser = argparse.ArgumentParser("python")

    parser.add_argument("-model_mols_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_docking_results_ligand_efficiency/",
                        help="directory of docking scores of molecules generated by model")

    return parser.parse_args()

if __name__=="__main__":
    args = get_args()
    model_mols_dir = args.model_mols_dir

    model_docking_score_files = [f for f in listdir(
                model_mols_dir) if isfile(join(model_mols_dir, f))]

    all_model_docking_scores = {}

    print("loading docking scores...")
    for docking_file in tqdm(model_docking_score_files):
        # docking scores of model molecules 
        with open(join(model_mols_dir, docking_file), "r") as f:
            model_docking_scores = yaml.full_load(f)
            all_model_docking_scores.update(model_docking_scores)

    with open("./good_ligand_efficiency_ligands.out", "w") as f:
        for ligand in all_model_docking_scores:
            if -0.06 < all_model_docking_scores[ligand] < -0.05:
                f.write(f"{ligand}: {all_model_docking_scores[ligand]}\n")
    
        