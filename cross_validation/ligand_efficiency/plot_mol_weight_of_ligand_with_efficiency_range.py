"""
Plot the distribution of molecular weights of the ligands with good ligand efficiency
"""
import argparse
import os
from os import listdir
from os.path import isfile, join
from tqdm import tqdm
import yaml
from openbabel import openbabel
import matplotlib.pyplot as plt

def get_args():
    parser = argparse.ArgumentParser("python")

    parser.add_argument("-docking_score_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_docking_results/",
                        help="directory of docking scores of molecules generated by model")

    parser.add_argument("-mol_dir",
                        required=False,
                        default="../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_sample_clustered_pdbqt/",
                        help="directory of the molecules")      

    return parser.parse_args()


def compute_mol_weight(pdbqt_file):
    # pdbqt_file = "../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_sample_clustered_pdbqt/1a3bB00/1a3bB00-1.pdbqt"
    obConversion = openbabel.OBConversion()
    obConversion.SetInAndOutFormats("pdbqt", "smi")

    mol = openbabel.OBMol()
    obConversion.ReadFile(mol, pdbqt_file)   # Open Babel will uncompress automatically
    return mol.GetMolWt()


if __name__ == '__main__':
    args = get_args()
    docking_score_dir = args.docking_score_dir
    mol_dir = args.mol_dir

    docking_score_files = [f for f in listdir(
                docking_score_dir) if isfile(join(docking_score_dir, f))]

    mol_weights = []
    # each docking file corresponds to a pocket
    for docking_file in tqdm(docking_score_files):
        # pocket name
        pocket = docking_file.split('_')[0]

        # load the dictionary of docking scores, keys are the file names
        # of pdbqt files
        with open(join(docking_score_dir, docking_file), "r") as f:
            docking_scores = yaml.full_load(f)
        
        # for each molecule
        for mol in docking_scores:
            # get docking score 
            docking_score = docking_scores[mol]

            # get pdbqt path 
            pdbqt_dir = mol_dir + pocket
            pdbqt_path = os.path.join(pdbqt_dir, mol) # mol is pocket + number.pdbqt, e.g., 4pnuA03-1.pdbqt

            # molecular weight
            mol_weight = compute_mol_weight(pdbqt_path)

            if docking_score is not None and mol_weight:
                # normalize docking score (ligand efficiency)
                le = docking_score / mol_weight
                if le <= -0.05:
                    mol_weights.append(mol_weight)
    
    # plot 
    fig, ax = plt.subplots()
    ax.set_title('Molecular Weight Distribution')
    ax.set_xlabel('Molecular Weight')
    ax.set_ylabel('Count')
    ax.hist(mol_weights, histtype='step', bins=50)
    plt.savefig("./mol_weight_dist_le<-0.05" + ".png", dpi=300)