"""
Plot the Tanimoto similarity distributions of 3 methods of the input pocket.
"""
import argparse
from rdkit import Chem
from rdkit.Chem import MACCSkeys
from rdkit.DataStructs import FingerprintSimilarity
from os.path import join
import yaml
from tqdm import tqdm
import random
import pickle
import matplotlib.pyplot as plt

# suppress rdkit error
from rdkit import rdBase
rdBase.DisableLog('rdApp.error')

def get_args():
    parser = argparse.ArgumentParser("python")
    parser.add_argument(
        "-pocket",
        default="3kn5B00",
        required=False,
        help="input pocket name"
    )

    parser.add_argument(
        "-model_mol_dir",
        default="../../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_sample_81920/",
        required=False,
        help="directory of molecules to evaluate"
    )

    parser.add_argument(
        "-label_smiles_path",
        required=False,
        default="../../../data/pocket-smiles.yaml",
        help="the label smiles of pockets"
    )

    parser.add_argument(
        "-rnn_control_path",
        required=False,
        default='../../../../../molecule-generator-project/results/run_35/sampled_molecules.out',
        help="input molecules for molecular weight distribution"
    )

    parser.add_argument(
        "-zinc_control_path",
        required=False,
        default='../../../../../zinc-sampler-project/zinc-dataset-bins.pickle',
        help="input molecules for molecular weight distribution"
    )

    return parser.parse_args()

def compute_similarity(target_maccs, mol):
    """Compute the similarity between two smiles."""
    mol = Chem.MolFromSmiles(mol)
    mol_maccs = MACCSkeys.GenMACCSKeys(mol)
    return FingerprintSimilarity(target_maccs, mol_maccs)

def compute_model_pocket_ts(label_smiles_dict, mol_dir, pocket_file):
    # generated molecules 
    with open(join(mol_dir, pocket_file), 'r') as f:
        mols = yaml.full_load(f)
    mols = list(mols.keys())
    pocket = pocket_file.split('_')[0]
    try:
        label_mol = label_smiles_dict[pocket]
        label_mol = Chem.MolFromSmiles(label_mol)
        label_maccs = MACCSkeys.GenMACCSKeys(label_mol)
    except:
        print(f"something went wrong, pocket: {pocket}")
        return None
    # compute all the tanimoto similarities
    pocket_ts = []
    print("Computing Pocket2Drug Tanimoto similarities...")
    for mol in tqdm(mols):
        try:
            ts = compute_similarity(label_maccs, mol)
            pocket_ts.append(ts)
        except:
            continue
    
    # get the best tanimoto similarity
    if not pocket_ts:
        print(f"no valid tc, pocket: {pocket}")
        return None
    
    return pocket_ts

def compute_control_pocket_ts(num_mols, control_list, label_smiles_dict, pocket_file):
    mols = random.sample(control_list, num_mols)
    pocket = pocket_file.split('_')[0]
    try:
        label_mol = label_smiles_dict[pocket]
        label_mol = Chem.MolFromSmiles(label_mol)
        label_maccs = MACCSkeys.GenMACCSKeys(label_mol)
    except:
        print(f"something went wrong, pocket: {pocket}")
        return None
    # compute all the tanimoto similarities
    pocket_ts = []
    for mol in tqdm(mols):
        try:
            ts = compute_similarity(label_maccs, mol)
            pocket_ts.append(ts)
        except:
            continue
    
    # get the best tanimoto similarity
    if not pocket_ts:
        print(f"no valid tc, pocket: {pocket}")
        return None
    return pocket_ts


if __name__ == '__main__':
    args = get_args()
    pocket = args.pocket
    model_mol_dir = args.model_mol_dir
    rnn_control_path = args.rnn_control_path
    zinc_control_path = args.zinc_control_path
    label_smiles_path = args.label_smiles_path

    # true label SMILES
    with open(label_smiles_path, 'r') as f:
        label_smiles_dict = yaml.full_load(f)

    # load molecules generated by Pocket2Drug
    p2d_pocket_file = f"{pocket}_sampled_temp1.0.yaml"

    # compute Pocket2Drug Tanimoto similarities
    p2d_ts = compute_model_pocket_ts(label_smiles_dict, model_mol_dir, p2d_pocket_file)
    num_mols = len(p2d_ts)

    # load and sample molecules generated by vanilla RNN
    with open(rnn_control_path, 'r') as f:
        rnn_control_list = f.readlines()
    rnn_control_list = [x.strip() for x in rnn_control_list]
    rnn_control_list = list(set(rnn_control_list))

    # compute RNN Tanimoto similarities
    print("Computing RNN Tanimoto similarities...")
    rnn_ts = compute_control_pocket_ts(num_mols, rnn_control_list, label_smiles_dict, p2d_pocket_file)

    # load and sample molecules generated by Zinc
    with open(zinc_control_path, 'rb') as f:
        bins = pickle.load(f)
    zinc_control_list = []
    for bin in bins:
        zinc_control_list.extend(bin)

    # comput Zinc Tanimoto similarities
    print("Computing RNN Tanimoto similarities...")
    zinc_ts = compute_control_pocket_ts(num_mols, zinc_control_list, label_smiles_dict, p2d_pocket_file)

    # plot 3 box plots 
    fig, ax = plt.subplots()
    ax.set_title(f"Tanimoto similarities of pocket {pocket}")
    
    data = [p2d_ts, rnn_ts, zinc_ts]

    #fig = plt.figure(figsize =(10, 7))
    fig = plt.figure(figsize =(8, 5))
    ax = fig.add_subplot(111)
    
    # Creating axes instance
    bp = ax.boxplot(data, patch_artist = True,
                    notch ='True', vert = 0)
    
    colors = ['#0000FF', '#00FF00','#FFFF00']
    
    for patch, color in zip(bp['boxes'], colors):
        patch.set_facecolor(color)
    
    # changing color and linewidth of
    # whiskers
    for whisker in bp['whiskers']:
        whisker.set(color ='#8B008B',
                    linewidth = 1.5,
                    linestyle =":")
    
    # changing color and linewidth of
    # caps
    for cap in bp['caps']:
        cap.set(color ='#8B008B',
                linewidth = 2)
    
    # changing color and linewidth of
    # medians
    for median in bp['medians']:
        median.set(color ='red',
                   linewidth = 3)
    
    # changing style of fliers
    for flier in bp['fliers']:
        flier.set(marker ='D',
                  color ='#e7298a',
                  alpha = 0.5)

    # x-axis labels
    ax.set_yticklabels(['Pocket2Drug', 'RNN', 'Zinc'])
    
    # Adding title
    plt.title(f"Tanimoto similarities of pocket {pocket}")
    
    # Removing top axes and right axes
    # ticks
    ax.get_xaxis().tick_bottom()
    ax.get_yaxis().tick_left()

    # show plot
    plt.savefig(f"./{pocket}.png", dpi=500)