"""
Plot the distribution of docking scores of
    1. Molecules generated by model
    2. Molecules sampled from Zinc accoring to the molecular weight distribution of item 1
    3. Molecules sampled from baseline model (vanilla RNN) accoring to the molecular weight distribution of item 1
"""
import argparse
from os import listdir
from os.path import isfile, join
from tqdm import tqdm
import yaml
import matplotlib.pyplot as plt


def get_args():
    parser = argparse.ArgumentParser("python")

    parser.add_argument("-model_mols_dir",
                        required=False,
                        default="../../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_ranked_docking_results/",
                        help="directory of docking scores of molecules generated by model")

    parser.add_argument("-zinc_mols_dir",
                        required=False,
                        default="../../../../p2d_results_selfie/cv_results/cross_val_fold_0/zinc_ranked_docking_results/",
                        help="directory of docking scores of molecules sampled from Zinc")

    parser.add_argument("-rnn_mols_dir",
                        required=False,
                        default="../../../../p2d_results_selfie/cv_results/cross_val_fold_0/mol_rnn_rank_docking_results/",
                        help="directory of docking scores of molecules sampled from vanilla RNN")

    return parser.parse_args()


def get_pocket_set(mol_dir):
    """Get the set of pockets in the input directory."""
    files = [f for f in listdir(mol_dir) if isfile(join(mol_dir, f))]
    pockets = [f.split('_')[0] for f in files]
    pockets = set(pockets)
    return pockets

if __name__=="__main__":
    args = get_args()
    model_mols_set = get_pocket_set(args.model_mols_dir)
    zinc_mols_set = get_pocket_set(args.zinc_mols_dir)
    rnn_mols_set = get_pocket_set(args.rnn_mols_dir)
    pockets = list(model_mols_set & zinc_mols_set & rnn_mols_set)

    all_model_docking_scores = []
    all_zinc_docking_scores = []
    all_rnn_docking_scores = []

    print("loading docking scores...")
    for pocket in tqdm(pockets):
        # docking scores of model molecules 
        with open(join(args.model_mols_dir, f"{pocket}_docking_score.yaml"), "r") as f:
            model_docking_scores = yaml.full_load(f)
            all_model_docking_scores.extend(list(model_docking_scores.values()))

        # docking scores of random zinc molecules
        with open(join(args.zinc_mols_dir, f"{pocket}_docking_score.yaml"), "r") as f:
            zinc_docking_scores = yaml.full_load(f)
            all_zinc_docking_scores.extend(list(zinc_docking_scores.values()))

        # docking scores of rnn molecules
        with open(join(args.rnn_mols_dir, f"{pocket}_docking_score.yaml"), "r") as f:
            rnn_docking_scores = yaml.full_load(f)
            all_rnn_docking_scores.extend(list(rnn_docking_scores.values()))

    # remove the outliers that are larger than 0
    all_model_docking_scores = [x for x in all_model_docking_scores if x < 0] 
    all_zinc_docking_scores = [x for x in all_zinc_docking_scores if x < 0]
    all_rnn_docking_scores = [x for x in all_rnn_docking_scores if x < 0]
    print(len(all_model_docking_scores))
    print(len(all_zinc_docking_scores))
    print(len(all_rnn_docking_scores))

    fig, ax = plt.subplots()
    ax.set_title('Docking Score Distribution')
    ax.set_xlabel('Docking Score')
    ax.set_ylabel('Count')
    ax.hist(all_model_docking_scores, histtype='step', bins=100, color='red', label="Model")
    ax.hist(all_rnn_docking_scores, histtype='step', bins=100, color='green', label="RNN")
    ax.hist(all_zinc_docking_scores, histtype='bar', bins=100, alpha=0.5, color="grey", label="Zinc")
    ax.legend()
    plt.savefig(join('./figures/', "total_docking_score_distribution" + ".png"), dpi=300)