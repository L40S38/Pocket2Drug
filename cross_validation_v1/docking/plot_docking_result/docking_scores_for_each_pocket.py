"""
Plot the best docking scores of the molecules generated by the model
and the random molecules sampled from Zinc.
"""
import statistics
import argparse
from os import listdir
from os.path import isfile, join
from tqdm import tqdm
import yaml
import matplotlib.pyplot as plt


def get_args():
    parser = argparse.ArgumentParser("python")

    parser.add_argument("-model_mols_dir",
                        required=False,
                        default="../../../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_ranked_docking_results/",
                        help="directory of docking scores of molecules generated by model")

    parser.add_argument("-zinc_mols_dir",
                        required=False,
                        default="../../../../p2d_results_selfie/cv_results/cross_val_fold_0/zinc_ranked_docking_results/",
                        help="directory of docking scores of molecules sampled from Zinc")

    parser.add_argument("-rnn_mols_dir",
                        required=False,
                        default="../../../../p2d_results_selfie/cv_results/cross_val_fold_0/mol_rnn_rank_docking_results/",
                        help="directory of docking scores of molecules sampled from vanilla RNN")

    parser.add_argument("-select_func",
                        required=False,
                        default="min",
                        choices=["min", "median", "mean"],
                        help="the function used to select docking scores")

    parser.add_argument("-control_group",
                        required=False,
                        default="zinc",
                        choices=["zinc", "rnn"],
                        help="the function used to select docking scores")

    return parser.parse_args()  

def get_pocket_set(mol_dir):
    """Get the set of pockets in the input directory."""
    files = [f for f in listdir(mol_dir) if isfile(join(mol_dir, f))]
    pockets = [f.split('_')[0] for f in files]
    pockets = set(pockets)
    return pockets

if __name__=="__main__":
    args = get_args()
    model_mols_set = get_pocket_set(args.model_mols_dir)
    control_group = args.control_group
    if control_group=="zinc":
        control_group_dir = args.zinc_mols_dir
    elif control_group=="rnn":
        control_group_dir = args.rnn_mols_dir
    control_mols_set = get_pocket_set(control_group_dir)
    pockets = list(model_mols_set & control_mols_set)

    select_func_name = args.select_func
    if select_func_name == 'min':
        select_func = min
    elif select_func_name == 'mean':
        select_func = statistics.mean
    elif select_func_name == 'median':
        select_func = statistics.median

    control_model_docking_scores = []

    print("loading docking scores...")
    num_error_pockets = 0
    for pocket in tqdm(pockets):
        # docking scores of model molecules 
        with open(join(args.model_mols_dir, f"{pocket}_docking_score.yaml"), "r") as f:
            model_docking_scores = yaml.full_load(f)
            try:
                model_pocket_docking_score = select_func(model_docking_scores.values())
            except:
                num_error_pockets += 1
                continue

        # docking scores of random control molecules
        with open(join(control_group_dir, f"{pocket}_docking_score.yaml"), "r") as f:
            control_docking_scores = yaml.full_load(f)
            try:
                control_pocket_docking_score = select_func(control_docking_scores.values())
            except:
                num_error_pockets += 1
                continue

        if model_pocket_docking_score and control_pocket_docking_score:
            control_model_docking_scores.append((control_pocket_docking_score, model_pocket_docking_score))

    control_model_docking_scores.sort(key=lambda x: x[0])

    fig, ax = plt.subplots()
    ax.set_title(f'{select_func_name.capitalize()} Docking Scores')
    ax.set_xlabel(f'{control_group.capitalize()} Docking Scores')
    ax.set_ylabel('Model Docking Scores')

    # Plot a line y = x. If the plot is above this line, it means that
    # model is better than random, and worse than random if plot is below
    # this line. 
    x = [control_model_docking_scores[0][0], control_model_docking_scores[-1][0]]
    line1 = ax.plot(x, x, dashes=[6, 2], color='grey')

    # plot the model docking score vs the random control docking score
    control_docking_scores = [x[0] for x in control_model_docking_scores]
    model_docking_scores = [x[1] for x in control_model_docking_scores]
    line2 = ax.scatter(control_docking_scores, model_docking_scores, marker='.')

    # Plot the docking scores
    plt.savefig(f"./figures/{select_func_name}_{control_group}_vs_model.png", dpi=300)

    # simple statistics
    control_better = 0 
    model_better = 0
    tie = 0
    for x in control_model_docking_scores:
        if x[0] < x[1]:
            control_better += 1
        elif x[0] > x[1]:
            model_better += 1 
        else:
            tie += 1
    print(f"number of pockets where {control_group} is better: ", control_better)
    print("number of pockets where model is better: ", model_better)
    print("number of ties: ", tie)
    print("number of error pockets: ", num_error_pockets)