"""
For each pocket, sample a number of molecules from the molecules generated by the vanilla RNN which
have the same molecular weight distribution as the input molecules.
"""
import os
from os import listdir
from os.path import isdir, isfile, join
from rdkit import Chem
from rdkit.Chem import Descriptors
from tqdm import tqdm 
import random
import argparse
import yaml


class RNNSampler:
    def __init__(self, data_path, mol_per_pocket):
        with open(data_path, 'r') as f:
            self.smiles_list = f.readlines()
        self.smiles_list = [x.strip() for x in self.smiles_list]
        self.smiles_list = list(set(self.smiles_list))
        self.__distribute_mols()

        self.mol_per_pocket = mol_per_pocket

    def __distribute_mols(self):
        """Distribute the molecules into 9 bins according to their molecular weights."""
        # bins to store smiles according to molecular weights
        self.bins = [[] for _ in range(9)]

        # The molecules in the same file are from the same tranch,
        # so they should fall into the same bin. Therefore, we
        # only need to calculate the weight of only one molecule.
        print('distributing smiles into bins...')
        for smiles in tqdm(self.smiles_list):
            try:
                mol = Chem.MolFromSmiles(smiles)
                if mol:
                    mol_weight = Descriptors.MolWt(mol)

                    # the range of bins are the same as Zinc tranches:
                    # https://zinc.docking.org/tranches/home/#
                    if 200 <= mol_weight < 250:
                        self.bins[0].append(smiles)
                    elif 250 <= mol_weight < 300:
                        self.bins[1].append(smiles)
                    elif 300 <= mol_weight < 325:
                        self.bins[2].append(smiles)
                    elif 325 <= mol_weight < 350:
                        self.bins[3].append(smiles)
                    elif 350 <= mol_weight < 375:
                        self.bins[4].append(smiles)
                    elif 375 <= mol_weight < 400:
                        self.bins[5].append(smiles)
                    elif 400 <= mol_weight < 425:
                        self.bins[6].append(smiles)
                    elif 425 <= mol_weight < 450:
                        self.bins[7].append(smiles)
                    elif 450 <= mol_weight < 500:
                        self.bins[8].append(smiles)
            except:
                pass

    def sample_mols(self, smiles_list):
        """
        Sample from the bins according to the input molecular weights.
        mol_weights - list of integers
        """
        # compute the molecular weights
        mol_weights = self.smiles_to_weights(smiles_list)

        # calculate the count of each bin
        counts = self.count_mol_weights(mol_weights)

        # sample from each bin according to the counts
        sampled = []
        for i, cnt in enumerate(counts):
            sampled.extend(random.sample(self.bins[i], cnt))

        return sampled

    @staticmethod
    def count_mol_weights(mol_weights):
        """
        Count the number of weights in each bin, and 
        return a list of counts.
        """
        counts = [0 for _ in range(9)]

        for mol_weight in mol_weights:
            if mol_weight < 250:
                counts[0] += 1    
            elif 250 <= mol_weight < 300:
                counts[1] += 1
            elif 300 <= mol_weight < 325:
                counts[2] += 1
            elif 325 <= mol_weight < 350:
                counts[3] += 1
            elif 350 <= mol_weight < 375:
                counts[4] += 1
            elif 375 <= mol_weight < 400:
                counts[5] += 1
            elif 400 <= mol_weight < 425:
                counts[6] += 1
            elif 425 <= mol_weight < 450:
                counts[7] += 1
            else:
                counts[8] += 1

        return counts

    @staticmethod
    def smiles_to_weights(smiles_list):
        """
        Compute the molecular weights given a list of SMILES.
        """
        molecular_weights = []

        for smiles in smiles_list:
            mol = Chem.MolFromSmiles(smiles)
            if mol:
                mol_weight = Descriptors.MolWt(mol)
                molecular_weights.append(mol_weight)

        return molecular_weights


def get_args():
    parser = argparse.ArgumentParser("python")

    parser.add_argument("-data_path",
                        required=False,
                        default='../../../molecule-generator-project/results/run_35/sampled_molecules.out',
                        help="input molecules for molecular weight distribution")

    parser.add_argument("-in_dir",
                        required=False,
                        default="../../p2d_results_selfie/cv_results/cross_val_fold_0/val_pockets_sample/",
                        help="input molecules for molecular weight distribution")

    parser.add_argument("-out_dir",
                        required=False,
                        default="../../p2d_results_selfie/cv_results/cross_val_fold_0/mol_rnn_rank_sampled/",
                        help="directory for sampled SMILES from Zinc")

    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()
    data_path = args.data_path
    in_dir = args.in_dir
    out_dir = args.out_dir
    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    mol_per_pocket = 100
    sampler = RNNSampler(data_path, mol_per_pocket)

    # the yaml file list of the molecules generated by the GNN model for each pocket
    mol_files = [f for f in listdir(in_dir) if isfile(join(in_dir, f))]

    # read each file and sample according to the molecular weight distribution
    print('sampling from data generated by mol rnn...')
    for molFile in tqdm(mol_files):
        with open(join(in_dir, molFile), 'r') as f:
            in_mols = yaml.full_load(f)

        # sort the SMILES according to their frequencies
        in_mols = [(freq, smiles) for smiles, freq in in_mols.items()]
        in_mols.sort(key=lambda x: x[0], reverse=True)
        in_mols = in_mols[0:100]
        in_mols = [x[1] for x in in_mols]
        
        # sample
        out_mols = sampler.sample_mols(in_mols)

        out_file = molFile.split('_')[0] + '_mol_rnn.yaml'
        with open(join(out_dir, out_file), 'w') as f:
            yaml.dump(out_mols, f)
